<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:ctx="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:osgix="http://www.springframework.org/schema/osgi-compendium" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:act="http://action.trm.services.generic.action.superfinanciera.nexura.sc.com.co/"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:http-conf="http://cxf.apache.org/transports/http/configuration" xmlns:http="http://cxf.apache.org/transports/http/configuration" xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:tem="http://tempuri.org/"

	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/osgi-compendium http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd
        	http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd">

	<import resource="properties-beans.xml" />

	<!-- Enabled Spring Annotations -->
	<ctx:annotation-config />
	<ctx:component-scan base-package="com.avianca.pagos.*" />

	<bean class="org.slf4j.LoggerFactory" factory-method="getLogger" id="loggerRef">
		<constructor-arg index="0" value="dapiremark" />
	</bean>
	<!-- call static method -->
	<bean id="test" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="org.slf4j.MDC" />
		<property name="targetMethod" value="put" />
		<property name="arguments">
			<list>
				<value>dapiremark</value>
				<value>dapiremark</value>
			</list>
		</property>
	</bean>

	<cxf:rsServer id="restServer" address="${rest.server.url.path}" serviceClass="com.avianca.pagos.rest.service.RestService" staticSubresourceResolution="true">
		<cxf:providers>
			<bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" />
		</cxf:providers>
	</cxf:rsServer>
	<camel:sslContextParameters id="sslTracking">
		<camel:keyManagers keyPassword="changeit">
			<camel:keyStore password="changeit" resource="{{AmadeusCert}}" type="JKS" />
		</camel:keyManagers>
		<camel:trustManagers>
			<camel:keyStore password="changeit" resource="{{AmadeusCert}}" type="JKS" />
		</camel:trustManagers>
	</camel:sslContextParameters>
	<!-- Use camel-metrics route policy to gather metrics for all routes -->
	<bean id="metricsRoutePolicyFactory" class="org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory">
		<property name="useJmx" value="true" />
	</bean>
	<camelContext id="ctx-dapiremark" messageHistory="true" trace="false" useMDCLogging="true" typeConverterStatisticsEnabled="true" xmlns="http://camel.apache.org/schema/spring">
		<propertyPlaceholder location="ref:props" id="propertiesRef" />
		<endpoint id="rsServerEndpoint" uri="cxfrs://bean://restServer">
			<property key="bindingStyle" value="SimpleConsumer" />
			<property key="loggingFeatureEnabled" value="{{rest.server.loggingFeatureEnabled}}" />
		</endpoint>
		<endpoint id="sedaCorreoSoporteEndpoint" uri="seda:mailErrorNotification" />

		<onException id="CustomExceptionHandling">
			<description></description>
			<exception>java.lang.Exception</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log id="logBodyRequest" message="Exception: ${exception.message}, StackTrace:  ${exception.stacktrace}" loggingLevel="ERROR" loggerRef="loggerRef" />
			<setProperty propertyName="errorMessage">
				<simple>Exception: ${exception.message}, StackTrace:  ${exception.stacktrace}}</simple>
			</setProperty>
			<to pattern="InOnly" uri="ref:sedaCorreoSoporteEndpoint" />
			<log loggerRef="loggerRef" loggingLevel="ERROR" message="Response error: ${exception.message}" />
			<setHeader headerName="code">
				<simple>400</simple>
			</setHeader>
			<setHeader headerName="error">
				<simple>${exception.message}</simple>
			</setHeader>
			<bean ref="responseHandler">
				<description>Create Response Bean</description>
			</bean>
		</onException>

		<onException id="CustomExceptionHandling">
			<description></description>
			<exception>java.lang.IllegalArgumentException</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log id="logBodyRequest" message="Exception: ${exception.message}, StackTrace:  ${exception.stacktrace}" loggingLevel="ERROR" loggerRef="loggerRef" />
			<setProperty propertyName="errorMessage">
				<simple>Exception: ${exception.message}, StackTrace:  ${exception.stacktrace}}</simple>
			</setProperty>
			<to pattern="InOnly" uri="ref:sedaCorreoSoporteEndpoint" />
			<log loggerRef="loggerRef" loggingLevel="ERROR" message="Response error: ${exception.message}" />
			<setHeader headerName="code">
				<simple>400</simple>
			</setHeader>
			<setHeader headerName="error">
				<simple>${exception.message}</simple>
			</setHeader>
			<bean ref="responseHandler">
				<description>Create Response Bean</description>
			</bean>
		</onException>

		<onException id="CustomExceptionHandling">
			<description></description>
			<exception>java.io.IOException</exception>
			<exception>java.net.SocketException</exception>
			<exception>java.net.UnknownHostException</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<log id="logBodyRequest" message="Exception: ${exception.message}, StackTrace:  ${exception.stacktrace}" loggingLevel="ERROR" loggerRef="loggerRef" />
			<setProperty propertyName="errorMessage">
				<simple>Exception: ${exception.message}, StackTrace:  ${exception.stacktrace}</simple>
			</setProperty>
			<to pattern="InOnly" uri="ref:sedaCorreoSoporteEndpoint" />
			<log loggerRef="loggerRef" loggingLevel="ERROR" message="Response error: ${exception.message}" />
			<setHeader headerName="code">
				<simple>408</simple>
			</setHeader>
			<setHeader headerName="error">
				<simple>${exception.message}</simple>
			</setHeader>
			<bean ref="responseHandler">
				<description>Create Response Bean</description>
			</bean>
		</onException>

		<route id="restServerRoute" streamCache="true">
			<from uri="ref:rsServerEndpoint" id="restFrom" />
			<log id="logBodyRequest" message="Body: ${body}" loggingLevel="INFO" loggerRef="loggerRef" />
			<choice>
				<when>
					<simple>${header.orderId} != '' || ${header.orderId} != null || ${header.lastName} != '' || ${header.lastName} != null</simple>	
					<setHeader headerName="body">
						<simple>${body}</simple>
					</setHeader>
					<to uri="bean-validator:myvalidator" />
					<setHeader headerName="endpointRemark">
						<simple>{{endpointRemark}}</simple>
					</setHeader>
					<setHeader headerName="remarkPath">
						<simple>{{remarkPath}}</simple>
					</setHeader>
					<process ref="replaceLastName" />
					<setBody>
						<simple>${header.body}</simple>
					</setBody>
					<setHeader headerName="Authorization">
						<simple>Bearer ${header.Auth}</simple>
					</setHeader>
					<setHeader headerName="CamelHttpUri">
						<simple>${header.url.remark}</simple>
					</setHeader>
					<removeHeaders pattern="*" excludePattern="CamelHttpUri|Authorization" />
					<setHeader headerName="CamelHttpMethod">
						<simple>POST</simple>
					</setHeader>
					<setHeader headerName="Content-Type">
						<simple>application/json</simple>
					</setHeader>
					<convertBodyTo type="java.lang.String" />
					<log message="HEADERS: ${headers}" loggingLevel="DEBUG" loggerRef="loggerRef" />
					<to uri="https4://dummyHttp?throwExceptionOnFailure=false&amp;sslContextParametersRef=sslTracking&amp;httpClient.socketTimeout=60000" />
					<log message="ResponseCode PaymentRecords:  ${headers.CamelHttpResponseCode}" loggingLevel="INFO" loggerRef="loggerRef" />
					<log message="Response PaymentRecords: ${body}" loggingLevel="DEBUG" loggerRef="loggerRef" />

					<choice>
						<when>
							<simple>${headers.CamelHttpResponseCode} == '201'</simple>
							<setHeader headerName="code">
								<constant>200</constant>
							</setHeader>
							<convertBodyTo type="java.lang.String" />
						</when>
						<when>
							<simple>${headers.CamelHttpResponseCode} == '200'</simple>
							<setHeader headerName="code">
								<constant>203</constant>
							</setHeader>
							<convertBodyTo type="java.lang.String" />
						</when>
						<otherwise>
							<setHeader headerName="code">
								<simple>${headers.CamelHttpResponseCode}</simple>
							</setHeader>
							<convertBodyTo type="java.lang.String" />
						</otherwise>
					</choice>

				</when>
				<otherwise>
					<log message="Headers orderId and lastName are not correct, please check" loggingLevel="INFO" loggerRef="loggerRef" />
					<setHeader headerName="code">
						<constant>403</constant>
					</setHeader>
					<convertBodyTo type="java.lang.String" />
				</otherwise>
			</choice>
			<bean ref="responseHandler">
				<description>Create Respone Bean</description>
			</bean>
		</route>

		<route id="ROUTE-MAIL-NOTIFICATION" customId="true" streamCache="true">
			<description>Se redirecciona el mensaje al JMS de env√≠o de Emails</description>
			<from uri="ref:sedaCorreoSoporteEndpoint" />
			<doTry>
				<log message="Notificando el Error: ${property.errorMessage}" loggingLevel="INFO" loggerRef="loggerRef" />
				<setHeader headerName="DescripcionError">
					<simple>${headers.errorMessage}</simple>
				</setHeader>
				<setHeader headerName="NombreServicio" id="NombreServicio">
					<simple>{{application.service.name}}</simple>
				</setHeader>
				<setHeader headerName="TipoServicio" id="TipoServicio">
					<simple>{{application.service.type}}</simple>
				</setHeader>
				<setProperty propertyName="mailTo">
					<simple>{{email.to}}</simple>
				</setProperty>
				<setProperty propertyName="mailFrom">
					<simple>{{email.from}}</simple>
				</setProperty>
				<setProperty propertyName="mailSubject">
					<simple>{{email.subject}}</simple>
				</setProperty>
				<setProperty propertyName="mailTemplate">
					<constant>PlantillaCorreo</constant>
				</setProperty>
				<process ref="prepareMailingNotificationProcessor">
					<description>Create request to send to notification queue</description>
				</process>
				<log message="Enviando mensaje a la JMS de Notificaciones: ${body}" loggingLevel="INFO" loggerRef="loggerRef" />
				<inOnly uri="activemq:queue:{{email.notification.queue.name}}" />
				<doCatch>
					<exception>java.lang.Exception</exception>
					<handled>
						<constant>true</constant>
					</handled>
					<log message="Error enviando mensaje al QUEUE: {{email.notification.queue.name}}, MessageError: ${exception.message}" loggingLevel="ERROR" loggerRef="loggerRef" />
				</doCatch>
			</doTry>
		</route>
	</camelContext>

	<!-- ActiveMQ Configuration -->
	<bean class="org.apache.activemq.ActiveMQConnectionFactory" id="jmsConnectionFactory" depends-on="props">
		<property name="brokerURL" value="${AMQ.brokerURL}" />
		<property name="userName" value="${AMQ.userName}" />
		<property name="password" value="${AMQ.password}" />
	</bean>
	<bean class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop" id="pooledConnectionFactory" init-method="start">
		<property name="maxConnections" value="10" />
		<property name="maximumActiveSessionPerConnection" value="100" />
		<property name="blockIfSessionPoolIsFull" value="false" />
		<property name="blockIfSessionPoolIsFullTimeout" value="10000" />
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>
	<bean class="org.apache.camel.component.jms.JmsConfiguration" id="jmsConfiguration">
		<property name="connectionFactory" ref="pooledConnectionFactory" />
	</bean>
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="Configuration" ref="jmsConfiguration" />
	</bean>
	<!-- End ActiveMQ Configuration -->

</beans>
